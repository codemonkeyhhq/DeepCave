import java.util.Stack;

public class RedBlackTree <Key extends Comparable<Key>,Value>{
	private static final boolean RED=true;
	private static final boolean BLACK=false;
	
	private class Node {
		Key key;
		Value val;
		Node left,right;
//		int N;
		boolean color;
		Node(Key key,Value val,boolean color){
			this.key=key;
			this.val=val;
//			this.N=N;
			this.color=color;
			
		}
	}
	
private boolean isRed(Node x) {
	if(x==null)return false;
	return x.color==RED;
}

public Node rotateLeft(Node h) {
	Node x=h.right;
	h.right=x.left;
	x.left=h;
	x.color=h.color;
	h.color=RED;
//	x.N=h.N;
	return x;
	
}
public Node rotateRight(Node h) {
	Node x=h.left;
	h.left=x.right;
	x.right=h;
	x.color=h.color;
	h.color=RED;
	return x;	
}
public void flipColors(Node h) {

	h.color=RED;
	h.left.color=BLACK;
	h.right.color=BLACK;
	
}
public Node balance(Node h) {
	if(isRed(h.right)&&!isRed(h.left))h=rotateLeft(h);
	if(isRed(h.left)&&isRed(h.left.left))h=rotateRight(h);
	if(isRed(h.left)&&isRed(h.right))flipColors(h);
	return h;
}
public Node put(Node h,Key key,Value val) {
	if(h==null)return new Node(key,val,RED);
	int cmp=key.compareTo(h.key);
	if(cmp>0)h.right=put(h.right,key,val);
	else if(cmp<0)h.left=put(h.left,key,val);
	else h.val=val;
	return balance(h);
}
//public void deleteMin() {
//	
//}
private Node deleteMin(Node h) {
	if(h.left==null)return null;
	if(!isRed(h.left)&&!isRed(h.left.left))h=moveRedLeft(h);
	h.left=deleteMin(h.left);
	return balance(h);
}
private Node moveRedLeft(Node h) {
	flipColors(h);
	if(isRed(h.right.left)) {
		h.right=rotateRight(h.right);
		h=rotateLeft(h);
	}
	return h;
}
private Node moveRedRight(Node h) {
	flipColors(h);
	if(isRed(h.left.left)) {
		h=rotateRight(h);
		flipColors(h);
	}
	return h;
}
//public void deleteMax() {
//	
//}
private Node deleteMax(Node h) {
	if(isRed(h.left))h=rotateRight(h);
	if(h.right==null)return null;
	if(!isRed(h.right)&&!isRed(h.right.left))h=moveRedRight(h.right);
	h.right=deleteMax(h.right);
	return h;
}

}
